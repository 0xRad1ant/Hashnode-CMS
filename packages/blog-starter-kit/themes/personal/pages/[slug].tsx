import request from "graphql-request";
import ErrorPage from "next/error";
import Head from "next/head";
import Container from "../components/container";
import Layout from "../components/layout";
import MarkdownToHtml from "../components/markdown-to-html";
import Footer from "../components/footer";
import {
  Publication,
  Post,
  StaticPage,
  PageByPublicationDocument,
  PageByPublicationQuery,
  PageByPublicationQueryVariables,
  SinglePostByPublicationDocument,
  SinglePostByPublicationQuery,
  SinglePostByPublicationQueryVariables,
  SlugPostsByPublicationDocument,
  SlugPostsByPublicationQuery,
  SlugPostsByPublicationQueryVariables,
} from "../generated/graphql";
import { AppProvider } from "../components/contexts/appContext";
import PersonalHeader from "../components/personal-theme-header";
import CoverImage from "../components/cover-image";
import { resizeImage } from "@starter-kit/utils/image";
import DateFormatter from "../components/date-formatter";
import addArticleJsonLd from "@starter-kit/utils/seo/addArticleJsonLd";
import { getAutogeneratedPostOG } from "@starter-kit/utils/social/og";

type Props = {
  post: Post;
  page: StaticPage;
  publication: Publication;
};

const Post = (publication: Publication, post: Post) => {
  const highlightJsMonokaiTheme =
    ".hljs{display:block;overflow-x:auto;padding:.5em;background:#23241f}.hljs,.hljs-subst,.hljs-tag{color:#f8f8f2}.hljs-emphasis,.hljs-strong{color:#a8a8a2}.hljs-bullet,.hljs-link,.hljs-literal,.hljs-number,.hljs-quote,.hljs-regexp{color:#ae81ff}.hljs-code,.hljs-section,.hljs-selector-class,.hljs-title{color:#a6e22e}.hljs-strong{font-weight:700}.hljs-emphasis{font-style:italic}.hljs-attr,.hljs-keyword,.hljs-name,.hljs-selector-tag{color:#f92672}.hljs-attribute,.hljs-symbol{color:#66d9ef}.hljs-class .hljs-title,.hljs-params{color:#f8f8f2}.hljs-addition,.hljs-built_in,.hljs-builtin-name,.hljs-selector-attr,.hljs-selector-id,.hljs-selector-pseudo,.hljs-string,.hljs-template-variable,.hljs-type,.hljs-variable{color:#e6db74}.hljs-comment,.hljs-deletion,.hljs-meta{color:#75715e}";

  const tagsList = (post.tags ?? []).map((tag) => (
    <li key={tag.id}>
      <a
        href={`/tag/${tag.slug}`}
        className="block px-2 py-1 font-medium border rounded-full dark:border-neutral-800 dark:hover:bg-neutral-800 md:px-4 hover:bg-slate-50"
      >
        #{tag.slug}
      </a>
    </li>
  ));

  return (
    <>
      <Head>
        <title>{post.seo?.title || post.title}</title>
        <link rel="canonical" href={post.url} />
        <meta
          name="description"
          content={post.seo?.description || post.brief || post.title}
        />
        <meta
          property="og:image"
          content={
            post.ogMetaData?.image ||
            post.coverImage?.url ||
            getAutogeneratedPostOG(post, publication)
          }
        />
        <meta
          property="twitter:image"
          content={
            post.ogMetaData?.image ||
            post.coverImage?.url ||
            getAutogeneratedPostOG(post, publication)
          }
        />
        <script
          type="application/ld+json"
          dangerouslySetInnerHTML={{
            __html: JSON.stringify(addArticleJsonLd(publication, post)),
          }}
        />
        <style
          dangerouslySetInnerHTML={{ __html: highlightJsMonokaiTheme }}
        ></style>
      </Head>
      <h1 className="text-4xl leading-tight tracking-tight text-black dark:text-white">
        {post.title}
      </h1>
      <div className="text-neutral-600 dark:text-neutral-400">
        <DateFormatter dateString={post.publishedAt} />
      </div>
      {post.coverImage && (
        <div className="w-full">
          <CoverImage
            title={post.title}
            src={resizeImage(post.coverImage.url, {
              w: 1600,
              h: 840,
              c: "thumb",
            })}
          />
        </div>
      )}
      <MarkdownToHtml contentMarkdown={post.content.markdown} />
      {(post.tags ?? []).length > 0 && (
        <div className="w-full mx-auto md:max-w-screen-md text-slate-600 dark:text-neutral-300">
          <ul className="flex flex-row flex-wrap items-center gap-2">
            {tagsList}
          </ul>
        </div>
      )}
    </>
  );
};

const Page = (page: StaticPage) => {
  const title = page.title;
  return (
    <>
      <Head>
        <title>{title}</title>
      </Head>
      <MarkdownToHtml contentMarkdown={page.content.markdown} />
    </>
  );
};

export default function PostOrPage({ publication, post, page }: Props) {
  if (!post && !page) {
    return <ErrorPage statusCode={404} />;
  }

  return (
    <AppProvider publication={publication} post={post}>
      <Layout>
        <Container className="flex flex-col items-stretch max-w-2xl gap-10 px-5 py-10 mx-auto">
          <PersonalHeader />
          <article className="flex flex-col items-start gap-10 pb-10">
            {post ? Post(publication, post) : Page(page)}
          </article>
          <Footer />
        </Container>
      </Layout>
    </AppProvider>
  );
}

type Params = {
  params: {
    slug: string;
  };
};

export async function getStaticProps({ params }: Params) {
  const data = await request<
    SinglePostByPublicationQuery,
    SinglePostByPublicationQueryVariables
  >(
    process.env.NEXT_PUBLIC_HASHNODE_GQL_ENDPOINT,
    SinglePostByPublicationDocument,
    {
      host: process.env.NEXT_PUBLIC_HASHNODE_PUBLICATION_HOST,
      slug: params.slug,
    }
  );

  // Extract the post data from the GraphQL response
  const publication = data.publication;
  if (!publication) {
    return {
      notFound: true,
    };
  }
  const post = publication.post;
  if (!post) {
    const staticPageData = await request<
      PageByPublicationQuery,
      PageByPublicationQueryVariables
    >(
      process.env.NEXT_PUBLIC_HASHNODE_GQL_ENDPOINT,
      PageByPublicationDocument,
      {
        host: process.env.NEXT_PUBLIC_HASHNODE_PUBLICATION_HOST,
        slug: params.slug,
      }
    );

    const page = staticPageData.publication.staticPage;
    return {
      props: {
        page,
        publication,
      },
      revalidate: 1,
    };
  }

  return {
    props: {
      post,
      publication,
    },
    revalidate: 1,
  };
}

export async function getStaticPaths() {
  const data = await request<
    SlugPostsByPublicationQuery,
    SlugPostsByPublicationQueryVariables
  >(
    process.env.NEXT_PUBLIC_HASHNODE_GQL_ENDPOINT,
    SlugPostsByPublicationDocument,
    {
      first: 10,
      host: process.env.NEXT_PUBLIC_HASHNODE_PUBLICATION_HOST,
    }
  );

  // Extract the post slugs from the GraphQL response
  const postSlugs = data.publication.posts.edges.map(
    (edge: any) => edge.node.slug
  );

  return {
    paths: postSlugs.map((slug: string) => {
      return {
        params: {
          slug: slug,
        },
      };
    }),
    fallback: "blocking",
  };
}
