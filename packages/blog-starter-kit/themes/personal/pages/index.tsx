import request from "graphql-request";
import Head from "next/head";
import { Container } from "../components/container";
import Layout from "../components/layout";
import MinimalPosts from "../components/minimal-posts";
import PersonalHeader from "../components/personal-theme-header";
import Footer from "../components/footer";
import {
  Publication,
  Post,
  PostsByPublicationDocument,
  PostsByPublicationQuery,
  PostsByPublicationQueryVariables,
} from "../generated/graphql";
import addPublicationJsonLd from "@starter-kit/utils/seo/addPublicationJsonLd";
import { getAutogeneratedPublicationOG } from "@starter-kit/utils/social/og";
import { AppProvider } from "../components/contexts/appContext";

const GQL_ENDPOINT = process.env.NEXT_PUBLIC_HASHNODE_GQL_ENDPOINT;

type Props = {
  publication: Publication;
  posts: Post[];
};

export default function Index({ publication, posts }: Props) {
  return (
    <AppProvider publication={publication}>
      <Layout>
        <Head>
          <title>{publication.title}</title>
          <meta property="og:image" content={publication.ogMetaData.image || getAutogeneratedPublicationOG(publication)} />
          <meta property="twitter:image" content={publication.ogMetaData.image || getAutogeneratedPublicationOG(publication)} />
          <script
            type="application/ld+json"
            dangerouslySetInnerHTML={{ __html: JSON.stringify(addPublicationJsonLd(publication)) }}
          />
        </Head>
        <Container className="flex flex-col items-stretch max-w-2xl gap-10 px-5 py-10 mx-auto">
          <PersonalHeader />
          {posts.length > 0 && (
            <MinimalPosts context="home" posts={posts} />
          )}
          <Footer />
        </Container>
      </Layout>
    </AppProvider>
  );
}

export const getStaticProps = async () => {
  const data = await request<
    PostsByPublicationQuery,
    PostsByPublicationQueryVariables
  >(GQL_ENDPOINT, PostsByPublicationDocument, {
    first: 20,
    host: process.env.NEXT_PUBLIC_HASHNODE_PUBLICATION_HOST,
  });

  const publication = data.publication;
  const posts = publication.posts.edges.map((edge) => edge.node);

  return {
    props: { publication, posts },
    revalidate: 1,
  };
};
