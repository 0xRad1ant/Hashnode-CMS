{"pageProps":{"post":{"slug":"api-design-guidelines","url":"https://engineering.hashnode.com/api-design-guidelines","brief":"Building APIs ‚Äì especially public-facing ones ‚Äì is hard. There are a lot of decisions to be made, starting with the API concept (GraphQL, REST, etc.) to be used, infrastructure, and much more. But having this is just the foundation of your API, and y...","title":"Crafting Superior APIs with Design Guidelines: Set Up For Success","publishedAt":"2023-07-20T10:45:56.188Z","coverImage":{"url":"https://cdn.hashnode.com/res/hashnode/image/upload/v1689837535442/efafa971-ea06-485d-9d5c-d42a4f512e85.png"},"author":{"name":"Jannik Wempe","profilePicture":"https://cdn.hashnode.com/res/hashnode/image/upload/v1686670777162/S3YVZnB5O.jpeg"},"id":"64b910642d0b5bc1eaea5e23","content":{"markdown":"Building APIs ‚Äì especially public-facing ones ‚Äì is hard. There are a lot of decisions to be made, starting with the API concept (GraphQL, REST, etc.) to be used, infrastructure, and much more. But having this is just the foundation of your API, and you have to build a good API on top of it (whatever \"good\" means in your case). This is where an API design guideline can come into play.\n\nThis article is the first in a series of GraphQL-related articles. We will start with the importance of an API design guideline and how it could help you and your team to write a good API. It also should provide ideas on what to include in such a guideline.\n\nThis article won't cover the initially touched fundamental decisions (like REST vs. GraphQL) or the infrastructure it is running on. I'll proceed with GraphQL as an example because that is what we have chosen for our main API. This article is neither about implementations. It is about concepts and ideas.\n\n## API Design Guideline and Why It Is Important\n\n### What Is An API Design Guideline?\n\nFirst of all, what is \"**API design**\"? API design refers to the process of creating the interface that allows different software applications to communicate and exchange data with each other. Good API design can involve creating a well-structured, intuitive, and easy-to-use interface that meets the needs of its users while also being scalable, secure, and reliable. Again, how you define a \"good\" API design is depending on your needs.\n\n<div data-node-type=\"callout\">\n<div data-node-type=\"callout-emoji\">üí°</div>\n<div data-node-type=\"callout-text\"><strong>A good API design is depending on your own needs.</strong></div>\n</div>\n\nWhat about the term \"**guidelines**\"? Guidelines in general provide a set of best practices, conventions, and recommendations.\n\nBringing those definitions together: An **API design guideline** is a set of best practices, conventions, and recommendations for creating the interface that allows different software applications to communicate and exchange data with each other. These guidelines aim to promote good API design practices, ensure consistency, and improve the quality of the API.\n\n## GraphQL API Design Guideline On a High Level\n\nBefore diving into technicalities in your guideline, make sure to define the goals and non-goals of the guideline and how or by whom it will be updated. This helps to evolve the guideline and keep it focused. Speaking of keeping it focused: Make sure to get to the point and don't write lengthy documents. People won't read it or find the desired content otherwise.\n\nYou don't have to reinvent an API design guideline from scratch. You can stand on the shoulder of giants and get inspiration from other popular APIs ([Shopify](https://shopify.dev/api/storefront/2023-01/queries/product), [GitHub](https://docs.github.com/en/graphql)) etc. There are even design guidelines or tutorials out there like [Shopify GraqhQL Design Tutorial](https://github.com/Shopify/graphql-design-tutorial/tree/master).\n\n<div data-node-type=\"callout\">\n<div data-node-type=\"callout-emoji\">üí°</div>\n<div data-node-type=\"callout-text\"><strong>Stand on the shoulders of giants.</strong></div>\n</div>\n\nMake sure to include examples. Examples are easier to understand if you provide \"dos\" and \"don'ts\" ‚Äì and highlight them accordingly. This is what an example could look like (from our naming conventions section):\n\n```graphql\n‚ùå\ntype Publication {\n  # ...\n\t# We have a field called metaHTML in the database\n    # but it has no meaning to consumers\n  metaHTML: String\n}\n\n‚úÖ\ntype Publication {\n  # ...\n  descriptionSEO: String\n}\n\n‚ùå\ntype Address {\n  # How could the country look like? \"GER\", \"Germany\", \"üá©üá™\"? ü§î\n  country: String!\n}\n\n(‚úÖ)\ntype Address {\n  # Even this could mean ISO alpha-2 or alpha-3,\n  # but this could be clarified in a description.\n  countryCode: String!\n}\n```\n\nA few additional ideas that might improve your guideline document:\n\n* use toggles to hide some secondary content\n    \n* provide resources; where is the idea coming from?\n    \n* a short intro for a section on why it is important\n    \n* use examples from your domain\n    \n* KISS (Keep It Short Simple) ‚Äì nobody will read a book about your API\n    \n* highlight important keywords\n    \n\n<div data-node-type=\"callout\">\n<div data-node-type=\"callout-emoji\">ü§î</div>\n<div data-node-type=\"callout-text\">Any important things that you would add?</div>\n</div>\n\n## Impressions From Our Guideline\n\nIn this section, I will share a few impressions of our current GraphQL API design guideline. Maybe we will make it public at some point if we think it is good enough.\n\n<div data-node-type=\"callout\">\n<div data-node-type=\"callout-emoji\">‚Ñπ</div>\n<div data-node-type=\"callout-text\">Please note that our current public GraphQL API has been created before having those guidelines. The guidelines were (and are) used for our new, internal API that we will release to the public at some point.</div>\n</div>\n\nFirst of all, this is the table of contents of the current version of our GraphQL API design guide (*yes, we use Notion* üòú):\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1688734658201/9e98e1a5-5183-4c02-b572-d8768efd4408.png align=\"center\")\n\nI won't go into detail here but here are some things that our guideline includes. I'll copy some pieces, rephrase others, or provide ideas on what the section could include. Copied parts are shown as a quote.\n\n## General Naming Convention\n\n<div data-node-type=\"callout\">\n<div data-node-type=\"callout-emoji\">üòµ‚Äçüí´</div>\n<div data-node-type=\"callout-text\">‚ÄúThere are only two hard things in Computer Science: cache invalidation and naming things.‚Äù</div>\n</div>\n\n> Naming is a hard task. When a thing is named and being consumed by a client, there is almost no going back without a breaking change. To avoid this, try to be specific and avoid abstract names.\n> \n> Instead:\n> \n> * Choose field names based on **what makes sense**\n>     \n> * **Don‚Äôt be influenced** by legacy APIs or what the field is called in the database (DB Schema ‚â† GQL Schema)\n>     \n> * Choose **self-documenting** names\n>     \n>     Resources\n>     \n>     [Designing a scalable GraphQl schema](https://nordsecurity.com/blog/designing-a-scalable-graphql-schema)\n>     \n\n*Note: Here we are providing the examples that I provided in the previous section.*\n\n## Node Interface\n\n> Types that represent entities that have a lifetime (and are usually stored in their own database table) should implement the `Node` interface.\n> \n> Example:\n> \n> ```graphql\n> interface Node {\n>   id: ID!\n> }\n> \n> type Post implements Node {\n>   id: ID!\n>   # ...\n> }\n> ```\n\n## Booleans\n\n> Booleans are almost always non-nullable. Only make them optional if there is actual meaning in being `null` as opposed to `false`.\n> \n> If there are more states than two, consider using an `enum` instead.\n\n## Custom Scalars\n\nWhen should you create custom scalars? Unnecessarily introducing custom scalars can make your live harder evolving the API because you'll more likely introduce breaking changes.\n\nHow should they be named? We use PascalCase.\n\nNot use custom scalars for validation, e.g. `first_Int_NotNull_min_1_max_20`.\n\n## Queries ‚Äì Single Entities\n\n> * use the singular entity name, e.g. `post` (don‚Äôt use HTTP verbs like in `getPost`)\n>     \n> * if multiple **unique** filters are required (e.g. by `id` and `slug`) use a single query with inputs optional and throw an error if either no arguments or multiple provided\n>     \n> * use an **optional return value** to denote a ‚Äúnot found‚Äù rather than returning an error; only if not finding something really is an error it should be modeled as such (see `me` in examples)\n>     \n\n## Queries ‚Äì Multiple Entities\n\nThis section should answer questions such as:\n\n* How to name a query returning multiple entities?\n    \n* How to deal with pagination? When should pagination be added?\n    \n* How to deal with Filtering and Sorting?\n    \n\n## Mutations\n\nThis is another bigger section in our document and I'll just provide some ideas:\n\n* Naming convention: e.g. `publishPost` vs. `postPublish`\n    \n* We don't follow CRUD (Create, Read, Update, Delete), e.g. `createPost`, `updatePost` etc. We use more business-specific names and more fine-granular mutations.\n    \n* How to name arguments and outputs?\n    \n* What should you return? (Most often the whole entity, but that might not be the case for every mutation)\n    \n\n## Reading Recommendations\n\nThese are the reading recommendations that we have listed in our guideline:\n\n### Docs, Blog Posts, etc.\n\n* [Shopify GraphQL Design Tutorial](https://github.com/Shopify/graphql-design-tutorial/blob/master/TUTORIAL.md)\n    \n* [GraphQL Rules](https://graphql-rules.com/)\n    \n* [Designing GraphQL Mutations](https://www.apollographql.com/blog/graphql/basics/designing-graphql-mutations/)\n    \n* [GraphQL Best Practices](https://graphql.org/learn/best-practices/)\n    \n\n### Example Implementations\n\n* [Shopify Storefront API](https://shopify.dev/api/storefront/2023-01/queries/product)\n    \n* [Relay GraphQL Example Schema](https://github.com/relayjs/relay-examples/blob/880aee6b63573391916bf99948039ef53125804a/issue-tracker-next-v13/schema.graphql#L12381)\n    \n* [GitHub GraphQL API](https://docs.github.com/en/graphql)\n    \n\n### YouTube\n\n* [GraphQL Schema Design @ Scale (Marc-Andr√© Giroux)](https://www.youtube.com/watch?v=pJamhW2xPYw)\n    \n\n## Conclusion\n\nIn my opinion, an API design guideline is essential for a team with more than a few people to create and evolve an API that feels consistent, is easy to use, and maintainable.\n\nHopefully, this article gave you an idea of why an API design guideline is helpful and provided some ideas about what to include and how to write it.\n\nIs there anything that you think is a must in an API guideline?","html":"<p>Building APIs ‚Äì especially public-facing ones ‚Äì is hard. There are a lot of decisions to be made, starting with the API concept (GraphQL, REST, etc.) to be used, infrastructure, and much more. But having this is just the foundation of your API, and you have to build a good API on top of it (whatever \"good\" means in your case). This is where an API design guideline can come into play.</p>\n<p>This article is the first in a series of GraphQL-related articles. We will start with the importance of an API design guideline and how it could help you and your team to write a good API. It also should provide ideas on what to include in such a guideline.</p>\n<p>This article won't cover the initially touched fundamental decisions (like REST vs. GraphQL) or the infrastructure it is running on. I'll proceed with GraphQL as an example because that is what we have chosen for our main API. This article is neither about implementations. It is about concepts and ideas.</p>\n<h2 id=\"heading-api-design-guideline-and-why-it-is-important\">API Design Guideline and Why It Is Important</h2>\n<h3 id=\"heading-what-is-an-api-design-guideline\">What Is An API Design Guideline?</h3>\n<p>First of all, what is \"<strong>API design</strong>\"? API design refers to the process of creating the interface that allows different software applications to communicate and exchange data with each other. Good API design can involve creating a well-structured, intuitive, and easy-to-use interface that meets the needs of its users while also being scalable, secure, and reliable. Again, how you define a \"good\" API design is depending on your needs.</p>\n<div data-node-type=\"callout\">\n<div data-node-type=\"callout-emoji\">üí°</div>\n<div data-node-type=\"callout-text\"><strong>A good API design is depending on your own needs.</strong></div>\n</div>\n\n<p>What about the term \"<strong>guidelines</strong>\"? Guidelines in general provide a set of best practices, conventions, and recommendations.</p>\n<p>Bringing those definitions together: An <strong>API design guideline</strong> is a set of best practices, conventions, and recommendations for creating the interface that allows different software applications to communicate and exchange data with each other. These guidelines aim to promote good API design practices, ensure consistency, and improve the quality of the API.</p>\n<h2 id=\"heading-graphql-api-design-guideline-on-a-high-level\">GraphQL API Design Guideline On a High Level</h2>\n<p>Before diving into technicalities in your guideline, make sure to define the goals and non-goals of the guideline and how or by whom it will be updated. This helps to evolve the guideline and keep it focused. Speaking of keeping it focused: Make sure to get to the point and don't write lengthy documents. People won't read it or find the desired content otherwise.</p>\n<p>You don't have to reinvent an API design guideline from scratch. You can stand on the shoulder of giants and get inspiration from other popular APIs (<a target=\"_blank\" href=\"https://shopify.dev/api/storefront/2023-01/queries/product\">Shopify</a>, <a target=\"_blank\" href=\"https://docs.github.com/en/graphql\">GitHub</a>) etc. There are even design guidelines or tutorials out there like <a target=\"_blank\" href=\"https://github.com/Shopify/graphql-design-tutorial/tree/master\">Shopify GraqhQL Design Tutorial</a>.</p>\n<div data-node-type=\"callout\">\n<div data-node-type=\"callout-emoji\">üí°</div>\n<div data-node-type=\"callout-text\"><strong>Stand on the shoulders of giants.</strong></div>\n</div>\n\n<p>Make sure to include examples. Examples are easier to understand if you provide \"dos\" and \"don'ts\" ‚Äì and highlight them accordingly. This is what an example could look like (from our naming conventions section):</p>\n<pre><code class=\"lang-graphql\">‚ùå\n<span class=\"hljs-keyword\">type</span> Publication {\n  <span class=\"hljs-comment\"># ...</span>\n    <span class=\"hljs-comment\"># We have a field called metaHTML in the database</span>\n    <span class=\"hljs-comment\"># but it has no meaning to consumers</span>\n  <span class=\"hljs-symbol\">metaHTML:</span> String\n}\n\n‚úÖ\n<span class=\"hljs-keyword\">type</span> Publication {\n  <span class=\"hljs-comment\"># ...</span>\n  <span class=\"hljs-symbol\">descriptionSEO:</span> String\n}\n\n‚ùå\n<span class=\"hljs-keyword\">type</span> Address {\n  <span class=\"hljs-comment\"># How could the country look like? \"GER\", \"Germany\", \"üá©üá™\"? ü§î</span>\n  <span class=\"hljs-symbol\">country:</span> String!\n}\n\n(‚úÖ)\n<span class=\"hljs-keyword\">type</span> Address {\n  <span class=\"hljs-comment\"># Even this could mean ISO alpha-2 or alpha-3,</span>\n  <span class=\"hljs-comment\"># but this could be clarified in a description.</span>\n  <span class=\"hljs-symbol\">countryCode:</span> String!\n}\n</code></pre>\n<p>A few additional ideas that might improve your guideline document:</p>\n<ul>\n<li><p>use toggles to hide some secondary content</p>\n</li>\n<li><p>provide resources; where is the idea coming from?</p>\n</li>\n<li><p>a short intro for a section on why it is important</p>\n</li>\n<li><p>use examples from your domain</p>\n</li>\n<li><p>KISS (Keep It Short Simple) ‚Äì nobody will read a book about your API</p>\n</li>\n<li><p>highlight important keywords</p>\n</li>\n</ul>\n<div data-node-type=\"callout\">\n<div data-node-type=\"callout-emoji\">ü§î</div>\n<div data-node-type=\"callout-text\">Any important things that you would add?</div>\n</div>\n\n<h2 id=\"heading-impressions-from-our-guideline\">Impressions From Our Guideline</h2>\n<p>In this section, I will share a few impressions of our current GraphQL API design guideline. Maybe we will make it public at some point if we think it is good enough.</p>\n<div data-node-type=\"callout\">\n<div data-node-type=\"callout-emoji\">‚Ñπ</div>\n<div data-node-type=\"callout-text\">Please note that our current public GraphQL API has been created before having those guidelines. The guidelines were (and are) used for our new, internal API that we will release to the public at some point.</div>\n</div>\n\n<p>First of all, this is the table of contents of the current version of our GraphQL API design guide (<em>yes, we use Notion</em> üòú):</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1688734658201/9e98e1a5-5183-4c02-b572-d8768efd4408.png\" alt class=\"image--center mx-auto\" /></p>\n<p>I won't go into detail here but here are some things that our guideline includes. I'll copy some pieces, rephrase others, or provide ideas on what the section could include. Copied parts are shown as a quote.</p>\n<h2 id=\"heading-general-naming-convention\">General Naming Convention</h2>\n<div data-node-type=\"callout\">\n<div data-node-type=\"callout-emoji\">üòµ‚Äçüí´</div>\n<div data-node-type=\"callout-text\">‚ÄúThere are only two hard things in Computer Science: cache invalidation and naming things.‚Äù</div>\n</div>\n\n<blockquote>\n<p>Naming is a hard task. When a thing is named and being consumed by a client, there is almost no going back without a breaking change. To avoid this, try to be specific and avoid abstract names.</p>\n<p>Instead:</p>\n<ul>\n<li><p>Choose field names based on <strong>what makes sense</strong></p>\n</li>\n<li><p><strong>Don‚Äôt be influenced</strong> by legacy APIs or what the field is called in the database (DB Schema ‚â† GQL Schema)</p>\n</li>\n<li><p>Choose <strong>self-documenting</strong> names</p>\n<p>  Resources</p>\n<p>  <a target=\"_blank\" href=\"https://nordsecurity.com/blog/designing-a-scalable-graphql-schema\">Designing a scalable GraphQl schema</a></p>\n</li>\n</ul>\n</blockquote>\n<p><em>Note: Here we are providing the examples that I provided in the previous section.</em></p>\n<h2 id=\"heading-node-interface\">Node Interface</h2>\n<blockquote>\n<p>Types that represent entities that have a lifetime (and are usually stored in their own database table) should implement the <code>Node</code> interface.</p>\n<p>Example:</p>\n<pre><code class=\"lang-graphql\"><span class=\"hljs-keyword\">interface</span> Node {\n  <span class=\"hljs-symbol\">id:</span> ID!\n}\n\n<span class=\"hljs-keyword\">type</span> Post <span class=\"hljs-keyword\">implements</span> Node {\n  <span class=\"hljs-symbol\">id:</span> ID!\n  <span class=\"hljs-comment\"># ...</span>\n}\n</code></pre>\n</blockquote>\n<h2 id=\"heading-booleans\">Booleans</h2>\n<blockquote>\n<p>Booleans are almost always non-nullable. Only make them optional if there is actual meaning in being <code>null</code> as opposed to <code>false</code>.</p>\n<p>If there are more states than two, consider using an <code>enum</code> instead.</p>\n</blockquote>\n<h2 id=\"heading-custom-scalars\">Custom Scalars</h2>\n<p>When should you create custom scalars? Unnecessarily introducing custom scalars can make your live harder evolving the API because you'll more likely introduce breaking changes.</p>\n<p>How should they be named? We use PascalCase.</p>\n<p>Not use custom scalars for validation, e.g. <code>first_Int_NotNull_min_1_max_20</code>.</p>\n<h2 id=\"heading-queries-single-entities\">Queries ‚Äì Single Entities</h2>\n<blockquote>\n<ul>\n<li><p>use the singular entity name, e.g. <code>post</code> (don‚Äôt use HTTP verbs like in <code>getPost</code>)</p>\n</li>\n<li><p>if multiple <strong>unique</strong> filters are required (e.g. by <code>id</code> and <code>slug</code>) use a single query with inputs optional and throw an error if either no arguments or multiple provided</p>\n</li>\n<li><p>use an <strong>optional return value</strong> to denote a ‚Äúnot found‚Äù rather than returning an error; only if not finding something really is an error it should be modeled as such (see <code>me</code> in examples)</p>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"heading-queries-multiple-entities\">Queries ‚Äì Multiple Entities</h2>\n<p>This section should answer questions such as:</p>\n<ul>\n<li><p>How to name a query returning multiple entities?</p>\n</li>\n<li><p>How to deal with pagination? When should pagination be added?</p>\n</li>\n<li><p>How to deal with Filtering and Sorting?</p>\n</li>\n</ul>\n<h2 id=\"heading-mutations\">Mutations</h2>\n<p>This is another bigger section in our document and I'll just provide some ideas:</p>\n<ul>\n<li><p>Naming convention: e.g. <code>publishPost</code> vs. <code>postPublish</code></p>\n</li>\n<li><p>We don't follow CRUD (Create, Read, Update, Delete), e.g. <code>createPost</code>, <code>updatePost</code> etc. We use more business-specific names and more fine-granular mutations.</p>\n</li>\n<li><p>How to name arguments and outputs?</p>\n</li>\n<li><p>What should you return? (Most often the whole entity, but that might not be the case for every mutation)</p>\n</li>\n</ul>\n<h2 id=\"heading-reading-recommendations\">Reading Recommendations</h2>\n<p>These are the reading recommendations that we have listed in our guideline:</p>\n<h3 id=\"heading-docs-blog-posts-etc\">Docs, Blog Posts, etc.</h3>\n<ul>\n<li><p><a target=\"_blank\" href=\"https://github.com/Shopify/graphql-design-tutorial/blob/master/TUTORIAL.md\">Shopify GraphQL Design Tutorial</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://graphql-rules.com/\">GraphQL Rules</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://www.apollographql.com/blog/graphql/basics/designing-graphql-mutations/\">Designing GraphQL Mutations</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://graphql.org/learn/best-practices/\">GraphQL Best Practices</a></p>\n</li>\n</ul>\n<h3 id=\"heading-example-implementations\">Example Implementations</h3>\n<ul>\n<li><p><a target=\"_blank\" href=\"https://shopify.dev/api/storefront/2023-01/queries/product\">Shopify Storefront API</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://github.com/relayjs/relay-examples/blob/880aee6b63573391916bf99948039ef53125804a/issue-tracker-next-v13/schema.graphql#L12381\">Relay GraphQL Example Schema</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://docs.github.com/en/graphql\">GitHub GraphQL API</a></p>\n</li>\n</ul>\n<h3 id=\"heading-youtube\">YouTube</h3>\n<ul>\n<li><a target=\"_blank\" href=\"https://www.youtube.com/watch?v=pJamhW2xPYw\">GraphQL Schema Design @ Scale (Marc-Andr√© Giroux)</a></li>\n</ul>\n<h2 id=\"heading-conclusion\">Conclusion</h2>\n<p>In my opinion, an API design guideline is essential for a team with more than a few people to create and evolve an API that feels consistent, is easy to use, and maintainable.</p>\n<p>Hopefully, this article gave you an idea of why an API design guideline is helpful and provided some ideas about what to include and how to write it.</p>\n<p>Is there anything that you think is a must in an API guideline?</p>\n"},"ogMetaData":{"image":"https://cdn.hashnode.com/res/hashnode/image/upload/v1689837592938/4521a2a4-f08d-40fd-b3a2-b573b9f0215a.png"}}},"__N_SSG":true}